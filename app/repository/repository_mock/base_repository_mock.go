// Code generated by mockery v2.20.0. DO NOT EDIT.

package repository_mock

import (
	context "context"
	base "marketplace-svc/app/model/base"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// BaseRepository is an autogenerated mock type for the BaseRepository type
type BaseRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields:
func (_m *BaseRepository) BeginTx() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Create provides a mock function with given fields: ctx, entity
func (_m *BaseRepository) Create(ctx context.Context, entity interface{}) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, entity, uid
func (_m *BaseRepository) Delete(ctx context.Context, entity interface{}, uid string) error {
	ret := _m.Called(ctx, entity, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) error); ok {
		r0 = rf(ctx, entity, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *BaseRepository) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Paginate provides a mock function with given fields: value, pagination, db
func (_m *BaseRepository) Paginate(value interface{}, pagination *base.Pagination, db *gorm.DB) func(*gorm.DB) *gorm.DB {
	ret := _m.Called(value, pagination, db)

	var r0 func(*gorm.DB) *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}, *base.Pagination, *gorm.DB) func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(value, pagination, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*gorm.DB) *gorm.DB)
		}
	}

	return r0
}

// Transaction provides a mock function with given fields: fc
func (_m *BaseRepository) Transaction(fc func(*gorm.DB) error) error {
	ret := _m.Called(fc)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(fc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, entity, uid, params
func (_m *BaseRepository) Update(ctx context.Context, entity interface{}, uid string, params map[string]interface{}) error {
	ret := _m.Called(ctx, entity, uid, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, entity, uid, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBaseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseRepository creates a new instance of BaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseRepository(t mockConstructorTestingTNewBaseRepository) *BaseRepository {
	mock := &BaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
