// Code generated by mockery v2.20.0. DO NOT EDIT.

package helper_mock

import (
	helper "marketplace-svc/helper/http"

	mock "github.com/stretchr/testify/mock"
)

// IHttpRC is an autogenerated mock type for the IHttpRC type
type IHttpRC struct {
	mock.Mock
}

// Execute provides a mock function with given fields: method, url, headers, formData, fileReaders, body
func (_m *IHttpRC) Execute(method string, url string, headers *map[string]string, formData *map[string]string, fileReaders *[]helper.FileReader, body *[]byte) (*helper.RCResponse, error) {
	ret := _m.Called("", "", nil, nil, nil, nil)

	var r0 *helper.RCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *map[string]string, *map[string]string, *[]helper.FileReader, *[]byte) (*helper.RCResponse, error)); ok {
		return rf("", "", nil, nil, nil, nil)
	}
	if rf, ok := ret.Get(0).(func(string, string, *map[string]string, *map[string]string, *[]helper.FileReader, *[]byte) *helper.RCResponse); ok {
		r0 = rf("", "", nil, nil, nil, nil)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helper.RCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *map[string]string, *map[string]string, *[]helper.FileReader, *[]byte) error); ok {
		r1 = rf("", "", nil, nil, nil, nil)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIHttpRC interface {
	mock.TestingT
	Cleanup(func())
}

// NewIHttpRC creates a new instance of IHttpRC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIHttpRC(t mockConstructorTestingTNewIHttpRC) *IHttpRC {
	mock := &IHttpRC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
