stages:
  - testing
  - scanning
  - build-release
  - deploy-staging
  - build-prod
  - release-job

go-test:
  stage: testing
  image:
    name: $CI_REGISTRY/base-os/golang:1.21.1-alpine
  script:
    - apk --no-cache add make git gcc libtool musl-dev ca-certificates dumb-init openssl libc-dev musl-dev librdkafka librdkafka-dev
    - echo "machine gitlab.klik.doctor login $GITLAB_USER password $GITLAB_PASSWORD" > /root/.netrc
    - chmod 600 /root/.netrc
    - export GOPRIVATE=gitlab.klik.doctor
    - go test -v ./app/service/test/...
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "develop"'
      when: always

# sonarqube-check:
#   stage: scanning
#   image:
#     name: $CI_REGISTRY/base-os/sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#     GIT_DEPTH: "0"
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - sonar-scanner
#   allow_failure: true
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_TAG =~ /.*sonar$/'
#       when: always

# vulnerability-check:
#   stage: scanning
#   image:
#     name: $CI_REGISTRY/base-os/golang:1.21.1-alpine
#   script:
#     - apk add git wget
#     - echo "machine gitlab.klik.doctor login $GITLAB_USER password $GITLAB_PASSWORD" > /root/.netrc
#     - chmod 600 /root/.netrc
#     - export GOPRIVATE=gitlab.klik.doctor
#     - go install github.com/google/osv-scanner/cmd/osv-scanner@v1
#     - osv-scanner --version
#     - osv-scanner --lockfile './go.mod'
#   allow_failure: true
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "develop"'
#       when: always

security-check:
  stage: scanning
  image:
    name: $CI_REGISTRY/base-os/golang:1.21.1-alpine
  script:
    - apk --no-cache add make git gcc libtool musl-dev ca-certificates dumb-init openssl
    - echo "machine gitlab.klik.doctor login $GITLAB_USER password $GITLAB_PASSWORD" > /root/.netrc
    - chmod 600 /root/.netrc
    - export GOPRIVATE=gitlab.klik.doctor
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
    - gosec -exclude=G302,G304,G505,G107,G404 ./...
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "develop"'
      when: always

build-release:
  stage: build-release
  image:
    name: $CI_REGISTRY/base-os/gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - echo "machine gitlab.klik.doctor login $GITLAB_USER password $GITLAB_PASSWORD" > ${CI_PROJECT_DIR}/.netrc
    - export VERSION=$(date +%Y%m%d-%H%M)
    - echo "CI_REGISTRY=$CI_REGISTRY, CI_COMMIT_TAG=$CI_COMMIT_TAG, CI_REGISTRY_USER=$CI_REGISTRY_USER, CI_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD, CI_PROJECT_DIR=$CI_PROJECT_DIR"
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile docker/Dockerfile
      --destination $CI_REGISTRY/$CI_REGISTRY_IMAGE:dev-$VERSION-$CI_PIPELINE_ID
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always

deploy-staging:
  stage: deploy-staging
  image: $CI_REGISTRY/base-os/ubuntu:22.04
  script:
    - apt update && apt install openssh-client git sshpass curl grep -y
    - eval `ssh-agent -s`
    - ssh-add <(echo "$CICD_SSH_KEY" | base64 -d)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.klik.doctor >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "$CICD_EMAIL"
    - git config --global user.name "$CICD_USERNAME"
    - git clone git@gitlab.klik.doctor:klikdokter/devops/staging/deploy-$CI_PROJECT_NAME.git -b master
    - cd deploy-$CI_PROJECT_NAME
    - export REPLACE_TAG=$(cat deployment.yml | grep "harbor-pulomas.klik.doctor" | grep -o "dev-.*");
    - export GET_TAG=$(curl -s 'https://harbor-pulomas.klik.doctor/api/v2.0/projects/klikdokter/repositories/'$CI_PROJECT_NAME'/artifacts?page=1' -u $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | grep -Po '(?<="name":").*?(?=",)' | head -n1);
    - sed -i "s|$REPLACE_TAG|$GET_TAG|g" deployment.*
    - git add . && git commit -m "Deploy $GET_TAG"
    - git push origin master
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always

build-prod:
  stage: build-prod
  image:
    name: $CI_REGISTRY/base-os/gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - echo $CI_COMMIT_TAG
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane cp $CI_REGISTRY/$CI_REGISTRY_IMAGE:$OLD_TAG $CI_REGISTRY/$CI_REGISTRY_IMAGE_PROD:$NEW_TAG
  rules:
    - if: '$OLD_TAG == null || $NEW_TAG == null || $CI_COMMIT_BRANCH != "master"'
      when: never
      allow_failure: false
    - if: '$OLD_TAG != null && $NEW_TAG != null && $CI_COMMIT_BRANCH == "master"'

release_job:
  stage: release-job
  image: $CI_REGISTRY/base-os/registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$OLD_TAG == null || $NEW_TAG == null || $CI_COMMIT_BRANCH != "master"'
      when: never
      allow_failure: false
    - if: '$OLD_TAG != null && $NEW_TAG != null && $CI_COMMIT_BRANCH == "master"'
  script:
    - echo "running release_job for $NEW_TAG"
    - release-cli create --name "Release $NEW_TAG" --tag-name "$NEW_TAG" --ref "$CI_COMMIT_SHA" --description $EXTRA_DESCRIPTION
